# -*- coding:utf-8 -*-
from django.core.urlresolvers import reverse
from django.http import Http404, HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404, redirect
from django.template import RequestContext
from django.conf import settings

from weibopy.auth import OAuthHandler
from weibopy.api import API
from weibopy.error import WeibopError
from weibopy import oauth

consumer_key = getattr(settings, 'APP_KEY')
consumer_secret = getattr(settings, 'APP_SECRET')
BACK_URL = getattr(settings, 'BACK_URL')

class WebOAuthHandler(OAuthHandler):

    def get_authorization_url_with_callback(self, callback, signin_with_weibo=False):
        """Get the authorization URL to redirect the user"""
        try:
            """get the request token"""
            self.request_token = self._get_request_token()

            """build auth request and return as url"""
            if signin_with_weibo:
                url = self._get_oauth_url('authenticate')
            else:
                url = self._get_oauth_url('authorize')
            request = oauth.OAuthRequest.from_token_and_callback(
                token=self.request_token, 
                callback=callback,
                http_url=url
            )
            return request.to_url()
        except Exception, e:
            raise WeibopError(e)

def _get_referer_url(request):
    referer_url = request.META.get('HTTP_REFERER', '/')
    host = reqeust.META['HTTP_HOST']
    if referer_url.startswith('http') and host not in referer_url:
        referer_url = '/' #避免外站直接跳到登录页而发生跳转错误
    return referer_url
    
def _oauth():
    """获取oauth认证类"""
    return WebOAuthHandler(consumer_key, consumer_secret)

def _get_referer_url(request):
    referer_url = request.META.get('HTTP_REFERER', '/')
    host = request.META['HTTP_HOST']
    if referer_url.startswith('http') and host not in referer_url:
        referer_url = '/'
    return referer_url

def login(request):
    back_to_url = _get_referer_url(request)
    request.session['login_back_to_url'] = back_to_url
    
    login_backurl = request.build_absolute_uri('/logincheck')
    auth_client = _oauth()
    auth_url = auth_client.get_authorization_url_with_callback(login_backurl)
    request.session['oauth_request_token'] = auth_client.request_token
    
    return HttpResponseRedirect(auth_url)

def login_check(request):
    verifier = request.GET.get('oauth_verifier', None)
    auth_client = _oauth()
    
    request_token = request.session['oauth_request_token']
    del request.session['oauth_request_token']
    
    auth_client.set_request_token(request_token.key, request_token.secret)
    access_token = auth_client.get_access_token(verifier)
    
    request.session['oauth_access_token'] = access_token
    
    back_to_url = request.session.get('login_back_to_url', '/')
    return HttpResponseRedirect(back_to_url)

def logout(request):
    try:
        del request.session['oauth_access_token']
    except KeyError:
        pass
    back_to_url = _get_referer_url(request)
    
    return HttpResponseRedirect(back_to_url)

def get_auth(request):
    auth = OAuthHandler(consumer_key, consumer_secret)
    access_token = request.session.get('oauth_access_token', None)
    if access_token is not None:
        auth.setToken(access_token.key, access_token.secret)
        api = API(auth)
        return api

def timeline(request):
    if request.session.get('oauth_access_token', None) is None:
        weibo_log = False
    else:
        weibo_log = True

    api = get_auth(request)
    user = api.me.verify_credentials()
    profile = {
            'weibo_log': weibo_log,
            'username': user.screen_name.encode('utf-8'),
            'userid': user.id,
        }
    return render_to_response('index.html',
        profile,
        context_instance=RequestContext(request)
    )



